# SPDX-FileCopyrightText: 2023-2024 Sony Semiconductor Solutions Corporation
#
# SPDX-License-Identifier: Apache-2.0

on:
  workflow_call:
    inputs:
      builder-tag:
        description: The builder tag to be used
        default: ghcr.io/${{ inputs.package-namespace }}/builder-raspios-bookworm
        required: false
        type: string
      ref:
        type: string
        required: true
      package-namespace:
        description: The package namespace for docker images
        default: ${{ github.repository }}
        required: false
        type: string

jobs:
  test:
    name: Unit tests (${{ matrix.name }}, ${{ matrix.platform }})
    runs-on: ${{ matrix.runner }}
    container:
      image: ghcr.io/${{ inputs.package-namespace }}/builder-${{ matrix.name }}:${{ inputs.builder-tag }}
      credentials:
        username: ${{ github.actor }}
        password: ${{ github.token }}
      options: ${{ startsWith(matrix.runner, 'buildjet') && '--user 1000:1001' || '--user 1001:127' }}
    timeout-minutes: 30
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: raspios-bookworm
            runner: ${{ github.event.repository.private && 'buildjet-8vcpu-ubuntu-2204-arm' || 'ubuntu-24.04-arm' }}
            platform: arm64
          - name: ubuntu-noble
            runner: ${{ github.event.repository.private && 'buildjet-8vcpu-ubuntu-2204-arm' || 'ubuntu-24.04-arm' }}
            platform: arm64
          - name: ubuntu-noble
            runner: ${{ github.event.repository.private && 'buildjet-4vcpu-ubuntu-2204' || 'ubuntu-24.04' }}
            platform: amd64

    steps:
      - name: Show awk version
        run: awk -Wversion

      - name: Checkout source
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.ref }}

      - name: Download test modules
        uses: actions/download-artifact@v4
        with:
          name: test-modules-${{ matrix.name }}-${{ matrix.platform }}-${{ github.run_id }}
          path: test_modules/

      - name: Download Python SDK
        uses: actions/download-artifact@v4
        with:
          name: python-sdk-${{ matrix.name }}-${{ matrix.platform }}-${{ github.run_id }}
          path: py-sdk

      - name: Set permissions
        run: chmod +x test_modules/*.elf

      - name: Build dependencies
        run: |
          make -j$((`nproc` * 2)) \
            KBUILD_DEFCONFIG=configs/unit-test-all-hubs-wasm.config \
            CFLAGS="-g" \
            TOOL=clang \
            depend

      - name: Build agent
        run: |
          make -j$((`nproc` * 2))\
            KBUILD_DEFCONFIG=configs/unit-test-all-hubs-wasm.config\
            TOOL=clang \
            SANITIZER=ENABLED \
            COVERAGE=ccov \
            CFLAGS="-g -Og -Werror" \

      - name: Build tests
        run: |
          make -C test -j$((`nproc` * 2))\
            TOOL=clang \
            SANITIZER=ENABLED \
            COVERAGE=ccov \
            CFLAGS="-g -Og -Werror" \
            LDFLAGS="-fuse-ld=lld -g" \
            build

      - name: Install the Python SDK
        run: |
          python3 -m venv .venv
          . .venv/bin/activate
          pip3 install py-sdk/*.whl

      - name: Run tests
        env:
          ASAN_OPTIONS: detect_leaks=1:detect_stack_use_after_return=1
          UBSAN_OPTIONS: print_stacktrace=1
          TERM: xterm
        run: . .venv/bin/activate && make -C test -j RUNFLAGS='-c -t 60'

      - name: Report summary blob profiling
        if: always()
        run: |
          echo "# Blob operation profiling" >> $GITHUB_STEP_SUMMARY
          LC_ALL=C awk -f ./scripts/blob-prof.awk test/logs/*/src/*/*.log >> $GITHUB_STEP_SUMMARY

      - name: Print failure logs
        if: failure()
        run: |
          awk '/FAIL/ {
              file = FILENAME
              sub(/\.res/, ".log", file)
              printf("::group::%s[%s] log\n", file, $2)
              system("cat " file)
              printf("::endgroup::\n")
          }' test/logs/*/src/*/*.res

      - name: Generate coverage
        run: |
          make \
            TOOL=clang \
            COVERAGE=ccov \
            coverage-ci

      - name: Report HTTP upload performance
        run: |
          ./scripts/print-http-stats.sh >> $GITHUB_STEP_SUMMARY

      # Upload test logs upon failure.
      - name: Upload logs
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-log-${{ matrix.name }}-${{ matrix.platform }}-${{ github.run_id }}-${{ github.run_attempt }}
          path: test/logs/**/*.log
          retention-days: ${{ job.status == 'success' && '7' || '14' }}

      - name: Upload coverage results
        uses: actions/upload-artifact@v4
        with:
          # Use a specific folder to not overwrite log files
          name: coverage-report-${{ matrix.name }}-${{ matrix.platform }}-${{github.run_id}}
          path: coverage
          retention-days: ${{ job.status == 'success' && '7' || '14' }}

      - name: Report code coverage
        if: ${{ matrix.name == 'raspios-bookworm' && matrix.platform == 'arm64' }}
        id: report-action-lcov
        uses: zgosalvez/github-actions-report-lcov@v4.1.2
        with:
          title-prefix: ${{ matrix.name }}-${{ matrix.platform }}
          coverage-files: coverage/filtered.lcov
          minimum-coverage: 55
          github-token: ${{ github.token }}
          update-comment: true

      - name: Report summary coverage to status
        if: ${{ matrix.name == 'raspios-bookworm' && matrix.platform == 'arm64' }}
        uses: guibranco/github-status-action-v2@v1.1.13
        with:
          authToken: ${{ github.token }}
          context: "Coverage line level: "
          description: ${{ steps.report-action-lcov.outputs.total-coverage }}%
          state: success
          sha: ${{ github.event.pull_request.head.sha || inputs.ref }}
