# SPDX-FileCopyrightText: 2023-2024 Sony Semiconductor Solutions Corporation
#
# SPDX-License-Identifier: Apache-2.0

on:
  workflow_call:
    inputs:
      builder-tag:
        description: The builder tag to be used
        default: latest
        required: false
        type: string
      package-namespace:
        description: The package namespace for docker images
        default: ${{ github.repository }}
        required: false
        type: string
      ref:
        type: string
        required: true

jobs:
  build-agent:
    name: Agent (${{ matrix.name }}, ${{ matrix.platform }})
    runs-on: ${{ matrix.runner }}
    container:
      image: ghcr.io/${{ inputs.package-namespace }}/builder-${{ matrix.name }}:${{ inputs.builder-tag }}
      credentials:
        username: ${{ github.actor }}
        password: ${{ github.token }}
      options: ${{ startsWith(matrix.runner, 'buildjet') && '--user 1000:1001' || '--user 1001:127' }}
    timeout-minutes: ${{ startsWith(matrix.runner, 'buildjet') && 20 || 8 }} # the worst case is 3 minutes but buildjet sometimes is slower downloading the docker image
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: raspios-bookworm
            runner: ${{ github.event.repository.private && 'buildjet-4vcpu-ubuntu-2204-arm' || 'ubuntu-22.04-arm' }}
            platform: arm64
          - name: ubuntu-noble
            runner: ${{ github.event.repository.private && 'buildjet-4vcpu-ubuntu-2204-arm' || 'ubuntu-22.04-arm' }}
            platform: arm64
          - name: ubuntu-noble
            runner: ${{ github.event.repository.private && 'buildjet-4vcpu-ubuntu-2204' || 'ubuntu-22.04' }}
            platform: amd64
    steps:
      - name: Checkout source
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.ref }}

      - name: Build
        run: bear -- make -j$((`nproc` * 2)) CFLAGS="-g -Werror"

      - name: Generate SBOM
        run: |
          ./scripts/sources bin/evp_agent > sources.lst
          ./scripts/mk-sbom -d -c `dpkg -l libc6 | awk '/libc6/ {print $3}'` sources.lst

      - name: Agent Debian Package
        run: make dist

      - name: Upload agent debian package
        uses: actions/upload-artifact@v4
        with:
          name: agent-deb-${{ matrix.name }}-${{ matrix.platform }}-${{ github.run_id }}
          path: evp-agent*.deb

      - name: Upload sdk debian package
        uses: actions/upload-artifact@v4
        with:
          name: libevp-app-sdk-dev-${{ matrix.name }}-${{ matrix.platform }}-${{ github.run_id }}
          path: libevp-app-sdk-dev*.deb

      - name: Upload SBOM
        uses: actions/upload-artifact@v4
        with:
          name: sbom-agent-${{ matrix.name }}-${{ matrix.platform }}-${{ github.run_id }}
          path: |
            compile_commands.json
            sources.lst
            sbom.tsv
            sbom-files.txt
            sbom-tmp.txt

  run-static-analysis:
    name: Static Code Analysis
    runs-on: ubuntu-22.04
    container:
      image: ghcr.io/${{ inputs.package-namespace }}/builder-ubuntu-noble:${{ inputs.builder-tag }}
      options: --user 1001:127
    timeout-minutes: 8 # the worst case is 3 minutes

    steps:
      - name: Checkout source
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.ref }}

      - name: Run cppcheck analysis
        run: make -j$((`nproc` * 2)) CFLAGS="-Werror" TOOL=cppcheck analysis
