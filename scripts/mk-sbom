#!/bin/sh

# SPDX-FileCopyrightText: 2023-2024 Sony Semiconductor Solutions Corporation
#
# SPDX-License-Identifier: Apache-2.0

# Apply previous validations to be sure that all the requirements are fulfil
# and we are going to get correct results. Sadly, we cannot validate that
# the binary does have the debug symbols required.
apply_validations()
{
	if ! test -d $PWD/.git -a -d src -a -d include
	then
		echo mk-sbom: not executed from top level directory >&2
		exit 1
	fi
}

# Ignore the files generated by the build system or they comes from
# the instalation of one of the evp-agent dependencies, because that
# would inject all the dependency licenses into evp-agent. Using an
# external header does not modify the licenses of the component itself,
# but it can create license conflicts (like for example using a header
# from a GPL library).
ignore_files()
{
	while read file
	do
		# ignore installed parson header, that is not ignored
		# in git because we need it for the old build system
		test $file = "include/parson.h" && continue

		if ! git check-ignore $file > /dev/null 2>&1
		then
			echo $file
		fi
	done
}

# Obtain the license trying to locate the SPDX identifier. Multiple SPDX
# identifier in a file is an error and this code assumes well formed
# files with only one identifier. It also concatenates the WITH clauses
# because from our point of view they are just different licenses.
# As SPDX Identifiers are case insensitive the license names are converted
# to upper case to unify following checks. While SPDX license identifier
# accepts the AND operator we don't expect that because it usually does not
# make sense. Also, if we go to consider AND, then we should consider the
# full operand precedence and parenthesis used in these expressions, and
# being pragmatic, only OR is commonly used.
#
# It outputs lines with the format "file license"
get_spdx_licenses()
{
	while read i
	do
		license=`sed -n '/.*SPDX-License-Identifier: */ {
			s@@@
			s@ *\*/ *$@@
			s/OR//
			s/ *WITH */_WITH_/
			p
			q
		}' $i 2>/dev/null | tr 'a-z' 'A-Z'`

		echo $i ${license:-UNKNOWN}
	done
}

# This filter is used to join all the licenses found for a group in
# multiple lines and consolidates them into a single line with all the
# licenses after the name of the group.
#
# It expects lines with the format "group license1 license2 ..." and
# prints out the same format after the consolidation.
join_licenses()
{
	awk   '{for (i = 2; i <= NF; i++)
			licenses[$1] = licenses[$1] " " $i
	}
	END    {for (i in licenses)
			print i, licenses[i]
	}' | sort
}

# This filter selects the best license from the list of licenses for
# a specific file. A file can have multiple licenses when the OR
# operator is used in the SPDX Identifier expression. We follow
# this heuristic:
#
#	- if the current license is empty then set it
#	- else if the current license is APACHE-2.0 then discard the new
#	- else if the current license is any version of GPL then set it
#	- else if the new license is APACHE-2.0 alike then set the current
#	  license
#	- else if the current license is not APACHE-2.0 and new license is
#	  not GPL alike then set the current license.
#
# This filter expects an input like "file license1 license2 ..." and outputs
# "file license"
choose_license()
{
	awk   '{license=""
		for (i = 2; i <= NF; i++) {
			if (license == "")
				license = $i
			else if (license == "APACHE-2.0")
				continue
			else if (license ~ /GPL/)
				license = $i
			else if ($i ~ /APACHE-2.0/)
				license = $i
			else if (license ~! /APACHE-2.0/ && $i !~ /GPL/)
				license = $i
		}
		print $1,license
	}'
}

# This filter handles the files without a license based in the knowledge that
# we have after inspecting the source tree. Some of the decisions are taken
# just with the directory containing the file. The clause `/UNKNOWN$/! n`
# avoids that a file with a correct license gets it modified.
apply_exceptions()
{
	sed -E '
	/UNKNOWN$/! n
	s@(.*/src/flatcc/[^ ]*).*@\1 APACHE-2.0@
	s@(.*/src/wasm-micro-runtime/.*/sandboxed-system-primitives/[^ ]*).*@\1 APACHE-2.0_WITH_LLVM-EXCEPTION@
	s@(.*/src/wasm-micro-runtime/core/iwasm/include/wasm_c_api.h).*@\1 APACHE-2.0_WITH_LLVM-EXCEPTION@
	s@(.*/src/nng/[^ ]*).*@\1 MIT@
	s@(/usr/include/[^ ]*).*@\1 LPGL-2.1-OR-LATER@
	s@(/usr/lib/gcc/[^ ]*).*@\1 LPGL-2.1-OR-LATER@
	s@(/usr/lib/linux/[^ ]*).*@\1 GPL-2.0_WITH_LINUX-SYSCALL-NOTE@
	'
}

# Group all the files based in the module in the src directory. All the files
# in the include directory are grouped together because they are part of the
# source code of the agent, but they can be part of the sdk and/or the sdk.
#
# It will generate a line for every pair (group, license), having multiple
# lines for the same group if different files had different licenses.
group_components()
{
	awk   '
	BEGIN {
		SUBSEP = " "
	}

	$1 ~ ENVIRON["PWD"] "/include/internal/time.h" ||
	$1 ~ ENVIRON["PWD"] "/include/internal/cdefs.h" ||
	$1 ~ ENVIRON["PWD"] "/include/internal/queue.h" ||
	$1 ~ ENVIRON["PWD"] "/src/libevp-agent/netlib/netlib.h" {
		sub(ENVIRON["PWD"] "/", "")
		comp[$1, $2] = 1
		next
	}

	$1 ~ ENVIRON["PWD"] "/src/libevp-agent/webclient" {
		comp["src/libevp-agent/webclient", $2] = 1
		next
	}

	$1 ~ ENVIRON["PWD"] "/src/libevp-agent/MQTT-C" {
		comp["src/libevp-agent/MQTT-C", $2] = 1
		next
	}

	$1 ~ ENVIRON["PWD"] "/src/.*/libc-wasi/sandboxed-system-primitives/" {
		comp["src/wasm-micro-runtime/core/iwasm/libraries/libc-wasi/sandboxed-system-primitives", $2] = 1
		next
	}

	$1 ~ ENVIRON["PWD"] "/include/" {
		comp["include", $2] = 1
		next
	}

	$1 ~ ENVIRON["PWD"] "/src/" {
		sub(ENVIRON["PWD"] "/", "")
		split($1, v, "/")
		comp["src/" v[2], $2] = 1
		next
	}

	$1 ~ "/usr/lib/gcc" || $1 ~ "/usr/include" || $1 ~ "/usr/lib/linux" {
		comp["libc", $2] = 1
		next
	}

	{
		comp[$1, $2] = 1
	}

	END   {
		for (i in comp)
			print i
	}'
}

# This filter appends the license status field based in the set of
# approved licenses.
#
# It accepts an input like "group license1 license2" and
# outputs "group license1,license2 accepted"
validate_licenses()
{
	awk   '{bad=0
		lic = ""
		for (i = 2; i <= NF; i++) {
			if ($i != "APACHE-2.0" &&
			    $i != "BSD-3-CLAUSE" &&
			    $i != "BSD-2-CLAUSE" &&
			    $i != "APACHE-2.0_WITH_LLVM-EXCEPTION" &&
			    $i != "LPGL-2.1-OR-LATER" &&
			    $i != "GPL-2.0_WITH_LINUX-SYSCALL-NOTE" &&
			    $i != "MIT")
				bad = 1
			lic = lic (lic == "" ? "" : ",") $i
		}
		print $1,lic, (bad ? "rejected" : "accepted")
	}'
}

# Insert the component version after the component name, The version
# field is between the component name and the consolidated comma
# separated group of licenses.
get_version()
{
	while read comp rest
	do
		case $comp in
		include/internal/cdefs.h|\
		include/internal/queue.h|\
		include/internal/time.h)
			echo $comp `awk '/\\$NetBSD:/ {print $4}' $comp` $rest
			;;
		libc)
			echo $comp ${libc:-unknown} $rest
			;;
		src/libevp-agent/netlib/netlib.h|\
		src/libevp-agent/webclient|\
		src/wasm-micro-runtime/core/iwasm/libraries/libc-wasi/sandboxed-system-primitives)
			echo $comp unknown $rest
			;;
		*)
			(cd $comp
			version=`git describe --always --abbrev=0 --dirty --all 2>/dev/null`
			echo $comp ${version:-unknown} $rest)
			;;
		esac
	done
}

# Append the link to the component at the end of the line. If the
# component is not a submodule then we use the url of the origin
# repository.
get_link()
{
	while read comp rest
	do
		case $comp in
		src/wasm-micro-runtime/core/iwasm/libraries/libc-wasi/sandboxed-system-primitives)
			echo $comp $rest https://github.com/NuxiNL/cloudabi-utils
			;;
		src/libevp-agent/netlib/netlib.h|\
		src/libevp-agent/webclient)
			echo $comp $rest `git config submodule.src/nuttx.url`
			;;
		include/internal/cdefs.h)
			echo $comp $rest https://cvsweb.netbsd.org/bsdweb.cgi/src/sys/sys/cdefs.h
			;;
		include/internal/queue.h)
			echo $comp $rest https://cvsweb.netbsd.org/bsdweb.cgi/src/sys/sys/queue.h
			;;
		include/internal/time.h)
			echo $comp $rest https://cvsweb.netbsd.org/bsdweb.cgi/src/sys/sys/time.h
			;;
		libc)
			echo $comp $rest https://www.gnu.org/software/libc/
			;;
		*)
			url=`git config submodule.$comp.url`
			echo $comp $rest ${url:-`git config remote.origin.url`}
			;;
		esac
	done
}

#
# Append a note description if required.
get_notes()
{
	while read comp rest
	do
		case $comp in
		include/internal/cdefs.h|\
		include/internal/queue.h|\
		include/internal/time.h)
			echo $comp $rest Imported from NetBSD
			;;
		src/libevp-agent/webclient|\
		src/libevp-agent/netlib/netlib.h)
			echo $comp $rest Imported from Nuttx
			;;
		src/wasm-micro-runtime/core/iwasm/libraries/libc-wasi/sandboxed-system-primitives)
			echo $comp $rest Imported from cloudabi-utils
			;;
		*)
			echo $comp $rest
			;;
		esac
	done
}

# Insert a header with the name of the tsv file, and convert space separators
# into a single tab. The "License Links" header is expected to expand to cover
# all the columns containing license links.
format_tsv()
{
	awk '
	BEGIN {
		print "Component Name\tVersion\tLicense\tLicense status\tComponent Link\tNotes"
	}

	{
		printf("%s\t%s\t%s\t%s\t%s\t", $1, $2, $3, $4, $5)
		$1 = $2 = $3 = $4 = $5 = ""
		sub(/^ */, "")
		print
	}'
}

usage()
{
	echo "mk-sbom [-f][-d][-c version][-o outfile] [file...]" >&2
	exit 1
}

for i
do
	case "$1" in
	-o)
		outfile=${2?`usage`}
		shift 2
		;;
	-d)
		debug=1
		shift
		;;
	-f)
		force=1
		shift
		;;
	-c)
		libc=${2?`usage`}
		shift 2
		;;
	-*)
		usage
		;;
	*)
		break
		;;
	esac
done

tmp=$$-sbom.tmp

trap 'rm -f $tmp' EXIT INT TERM HUP

apply_validations

cat "$@" |
ignore_files |
get_spdx_licenses |
choose_license |
apply_exceptions |
tee ${debug+sbom-files.txt} |
group_components |
join_licenses |
validate_licenses |
get_version |
get_link |
get_notes |
tee ${debug+sbom-tmp.txt} |
format_tsv |
tee ${debug+sbom-tmp.tsv} |
tee $tmp |
awk -v force=${force:-0} '
	$4 == "rejected" {print $1,$3,$4; r=1}
	END              {if (!force) exit(r)}' &&
mv $tmp ${outfile:-sbom.tsv}
